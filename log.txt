 DEBUG cx.graph=Graph { nodes: [Node { is_coinductive: true, initial: 4987918546314413149, children: [Child { index: B, cutoff: Cutoff { is_min: false, value: 12 } }] }, Node { is_coinductive: true, initial: 10800871313127553897, children: [Child { index: C, cutoff: Cutoff { is_min: true, value: 4 } }, Child { index: A, cutoff: Cutoff { is_min: true, value: 1 } }] }, Node { is_coinductive: false, initial: 7552060306999247418, children: [Child { index: D, cutoff: Cutoff { is_min: true, value: 4 } }] }, Node { is_coinductive: true, initial: 8544105883583893068, children: [Child { index: C, cutoff: Cutoff { is_min: false, value: 12 } }, Child { index: B, cutoff: Cutoff { is_min: false, value: 3 } }] }] }
 evaluate_canonical_goal node=A
   evaluate_canonical_goal node=B
     evaluate_canonical_goal node=C
       evaluate_canonical_goal node=D
         evaluate_canonical_goal node=C
           encountered cycle with depth 2, path_kind=Inductive
           return=10
         skip nested, index=B
         head=2, path_from_entry=Single(Coinductive), expected=Single(Inductive)
         to global cache, input=D, heads=[Head { input: C, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Inductive)) }], final_entry.nested_goals=NestedGoals { nested_goals: {} }
         return=9
       fixpoint changed provisional result, result=0
       evaluate_canonical_goal node=D
         evaluate_canonical_goal node=C
           encountered cycle with depth 2, path_kind=Inductive
           return=0
         evaluate_canonical_goal node=B
           encountered cycle with depth 1, path_kind=Inductive
           return=10
         head=1, path_from_entry=Single(Coinductive), expected=Single(Inductive)
         to global cache, input=D, heads=[Head { input: B, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Inductive)) }, Head { input: C, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Coinductive)) }], final_entry.nested_goals=NestedGoals { nested_goals: {} }
         return=8
       head=1, path_from_entry=Single(Inductive), expected=Single(Inductive)
       to global cache, input=C, heads=[Head { input: B, path_from_entry: Single(Inductive), expected_result: Initial(Single(Inductive)) }], final_entry.nested_goals=NestedGoals { nested_goals: {D} }
       return=12
     evaluate_canonical_goal node=A
       encountered cycle with depth 0, path_kind=Coinductive
       return=0
     fixpoint changed provisional result, result=6
     evaluate_canonical_goal node=C
       evaluate_canonical_goal node=D
         success, candidate=Candidate { additional_depth: 1, heads: [Head { input: C, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Inductive)) }], nested_goals: NestedGoals { nested_goals: {} }, data: QueryData { result: 9, proof_tree: () } }
         global cache hit
         return=9
       fixpoint changed provisional result, result=0
       evaluate_canonical_goal node=D
         evaluate_canonical_goal node=C
           encountered cycle with depth 2, path_kind=Inductive
           return=0
         evaluate_canonical_goal node=B
           encountered cycle with depth 1, path_kind=Inductive
           return=6
         to global cache, input=D, heads=[Head { input: B, path_from_entry: Single(Coinductive), expected_result: Value(6) }, Head { input: C, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Coinductive)) }], final_entry.nested_goals=NestedGoals { nested_goals: {} }
         return=6
       fixpoint changed provisional result, result=7
       evaluate_canonical_goal node=D
         evaluate_canonical_goal node=C
           encountered cycle with depth 2, path_kind=Inductive
           return=7
         skip nested, index=B
         to global cache, input=D, heads=[Head { input: C, path_from_entry: Single(Coinductive), expected_result: Value(7) }], final_entry.nested_goals=NestedGoals { nested_goals: {} }
         return=5
       fixpoint changed provisional result, result=5
       evaluate_canonical_goal node=D
         evaluate_canonical_goal node=C
           encountered cycle with depth 2, path_kind=Inductive
           return=5
         skip nested, index=B
         to global cache, input=D, heads=[Head { input: C, path_from_entry: Single(Coinductive), expected_result: Value(5) }], final_entry.nested_goals=NestedGoals { nested_goals: {} }
         return=7
       to global cache, input=C, heads=[Head { input: B, path_from_entry: Single(Inductive), expected_result: Value(6) }], final_entry.nested_goals=NestedGoals { nested_goals: {D} }
       return=11
     evaluate_canonical_goal node=A
       encountered cycle with depth 0, path_kind=Coinductive
       return=0
     fixpoint changed provisional result, result=2
     evaluate_canonical_goal node=C
       evaluate_canonical_goal node=D
         success, candidate=Candidate { additional_depth: 1, heads: [Head { input: C, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Inductive)) }], nested_goals: NestedGoals { nested_goals: {} }, data: QueryData { result: 9, proof_tree: () } }
         global cache hit
         return=9
       fixpoint changed provisional result, result=0
       evaluate_canonical_goal node=D
         evaluate_canonical_goal node=C
           encountered cycle with depth 2, path_kind=Inductive
           return=0
         evaluate_canonical_goal node=B
           encountered cycle with depth 1, path_kind=Inductive
           return=2
         to global cache, input=D, heads=[Head { input: B, path_from_entry: Single(Coinductive), expected_result: Value(2) }, Head { input: C, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Coinductive)) }], final_entry.nested_goals=NestedGoals { nested_goals: {} }
         return=8
       to global cache, input=C, heads=[Head { input: B, path_from_entry: Single(Inductive), expected_result: Value(2) }], final_entry.nested_goals=NestedGoals { nested_goals: {D} }
       return=12
     evaluate_canonical_goal node=A
       encountered cycle with depth 0, path_kind=Coinductive
       return=0
     fixpoint changed provisional result, result=6
     evaluate_canonical_goal node=C
       success, candidate=Candidate { additional_depth: 2, heads: [Head { input: B, path_from_entry: Single(Inductive), expected_result: Value(6) }], nested_goals: NestedGoals { nested_goals: {D} }, data: QueryData { result: 11, proof_tree: () } }
       global cache hit
       return=11
     evaluate_canonical_goal node=A
       encountered cycle with depth 0, path_kind=Coinductive
       return=0
     fixpoint changed provisional result, result=2
     canonical cycle overflow
     head=0, path_from_entry=Single(Coinductive), expected=Single(Coinductive)
     to global cache, input=B, heads=[Head { input: A, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Coinductive)) }], final_entry.nested_goals=NestedGoals { nested_goals: {C, D} }
     return=12
   fixpoint changed provisional result, result=13
   evaluate_canonical_goal node=B
     evaluate_canonical_goal node=C
       success, candidate=Candidate { additional_depth: 2, heads: [Head { input: B, path_from_entry: Single(Inductive), expected_result: Initial(Single(Inductive)) }], nested_goals: NestedGoals { nested_goals: {D} }, data: QueryData { result: 12, proof_tree: () } }
       global cache hit
       return=12
     evaluate_canonical_goal node=A
       encountered cycle with depth 0, path_kind=Coinductive
       return=13
     fixpoint changed provisional result, result=4
     evaluate_canonical_goal node=C
       evaluate_canonical_goal node=D
         success, candidate=Candidate { additional_depth: 1, heads: [Head { input: C, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Inductive)) }], nested_goals: NestedGoals { nested_goals: {} }, data: QueryData { result: 9, proof_tree: () } }
         global cache hit
         return=9
       fixpoint changed provisional result, result=0
       evaluate_canonical_goal node=D
         evaluate_canonical_goal node=C
           encountered cycle with depth 2, path_kind=Inductive
           return=0
         evaluate_canonical_goal node=B
           encountered cycle with depth 1, path_kind=Inductive
           return=4
         to global cache, input=D, heads=[Head { input: B, path_from_entry: Single(Coinductive), expected_result: Value(4) }, Head { input: C, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Coinductive)) }], final_entry.nested_goals=NestedGoals { nested_goals: {} }
         return=6
       fixpoint changed provisional result, result=7
       evaluate_canonical_goal node=D
         success, candidate=Candidate { additional_depth: 1, heads: [Head { input: C, path_from_entry: Single(Coinductive), expected_result: Value(7) }], nested_goals: NestedGoals { nested_goals: {} }, data: QueryData { result: 5, proof_tree: () } }
         global cache hit
         return=5
       fixpoint changed provisional result, result=5
       evaluate_canonical_goal node=D
         success, candidate=Candidate { additional_depth: 1, heads: [Head { input: C, path_from_entry: Single(Coinductive), expected_result: Value(5) }], nested_goals: NestedGoals { nested_goals: {} }, data: QueryData { result: 7, proof_tree: () } }
         global cache hit
         return=7
       to global cache, input=C, heads=[Head { input: B, path_from_entry: Single(Inductive), expected_result: Value(4) }], final_entry.nested_goals=NestedGoals { nested_goals: {D} }
       return=11
     evaluate_canonical_goal node=A
       encountered cycle with depth 0, path_kind=Coinductive
       return=13
     fixpoint changed provisional result, result=1
     evaluate_canonical_goal node=C
       evaluate_canonical_goal node=D
         success, candidate=Candidate { additional_depth: 1, heads: [Head { input: C, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Inductive)) }], nested_goals: NestedGoals { nested_goals: {} }, data: QueryData { result: 9, proof_tree: () } }
         global cache hit
         return=9
       fixpoint changed provisional result, result=0
       evaluate_canonical_goal node=D
         evaluate_canonical_goal node=C
           encountered cycle with depth 2, path_kind=Inductive
           return=0
         evaluate_canonical_goal node=B
           encountered cycle with depth 1, path_kind=Inductive
           return=1
         to global cache, input=D, heads=[Head { input: B, path_from_entry: Single(Coinductive), expected_result: Value(1) }, Head { input: C, path_from_entry: Single(Coinductive), expected_result: Initial(Single(Coinductive)) }], final_entry.nested_goals=NestedGoals { nested_goals: {} }
         return=4
       fixpoint changed provisional result, result=5
       evaluate_canonical_goal node=D
         success, candidate=Candidate { additional_depth: 1, heads: [Head { input: C, path_from_entry: Single(Coinductive), expected_result: Value(5) }], nested_goals: NestedGoals { nested_goals: {} }, data: QueryData { result: 7, proof_tree: () } }
         global cache hit
         return=7
       to global cache, input=C, heads=[Head { input: B, path_from_entry: Single(Inductive), expected_result: Value(1) }], final_entry.nested_goals=NestedGoals { nested_goals: {D} }
       return=11
     evaluate_canonical_goal node=A
       encountered cycle with depth 0, path_kind=Coinductive
       return=13
     to global cache, input=B, heads=[Head { input: A, path_from_entry: Single(Coinductive), expected_result: Value(13) }], final_entry.nested_goals=NestedGoals { nested_goals: {C, D} }
     return=1
   fixpoint changed provisional result, result=8
   evaluate_canonical_goal node=B
     evaluate_canonical_goal node=C
       success, candidate=Candidate { additional_depth: 2, heads: [Head { input: B, path_from_entry: Single(Inductive), expected_result: Initial(Single(Inductive)) }], nested_goals: NestedGoals { nested_goals: {D} }, data: QueryData { result: 12, proof_tree: () } }
       global cache hit
       return=12
     evaluate_canonical_goal node=A
       encountered cycle with depth 0, path_kind=Coinductive
       return=8
     fixpoint changed provisional result, result=2
     evaluate_canonical_goal node=C
       success, candidate=Candidate { additional_depth: 2, heads: [Head { input: B, path_from_entry: Single(Inductive), expected_result: Value(2) }], nested_goals: NestedGoals { nested_goals: {D} }, data: QueryData { result: 12, proof_tree: () } }
       global cache hit
       return=12
     evaluate_canonical_goal node=A
       encountered cycle with depth 0, path_kind=Coinductive
       return=8
     to global cache, input=B, heads=[Head { input: A, path_from_entry: Single(Coinductive), expected_result: Value(8) }], final_entry.nested_goals=NestedGoals { nested_goals: {C, D} }
     return=2
   to global cache, input=A, heads=[], final_entry.nested_goals=NestedGoals { nested_goals: {C, B, D} }
   return=12
